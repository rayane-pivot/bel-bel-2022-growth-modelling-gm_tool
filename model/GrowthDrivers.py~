def growth_drivers(
    df_bel,
    df_markets,
    df_competition_brands,
    brands_name,
    brands_markets,
    controllable_features=False,
):
    dict_res = {"xgb_feature_importance": {}, "permutation_importance": {}}
    competition_feats_cat = ["Competition price", "Competition sales"]
    compet_feats = []
    for brand in tqdm(brands_name, ascii=True, desc="Brands"):
        # Competition features
        feats_cat = [
            feat + "_" + cat
            for cat in brands_markets[brand]
            for feat in competition_feats_cat
        ]
        df_tmp = df_bel[df_bel.Brand == brand]
        if not controllable_features:
            df_tmp = pd.merge(
                df_tmp, df_competition_brands[["Date"] + feats_cat], on="Date"
            )
            df_tmp = pd.merge(
                df_tmp, df_markets[["Date"] + brands_markets[brand]], on="Date"
            )

        if len(df_tmp) == 0:
            continue

        # Add competition features if df_tmp is not empty (eg: NURISHH for 2019, 2020, etc...)
        compet_feats += feats_cat

        for key in dict_res:
            dict_res[key][brand] = {}

        df_tmp_X = df_tmp.drop(["Date", "Brand", "Sales in volume"], axis=1)
        X = df_tmp_X.values
        y = df_tmp["Sales in volume"]

        X_train, X_test, y_train, y_test = train_test_split(
            X, y, test_size=0.15, random_state=42
        )
        xgb_model = XGBRegressor()
        xgb_model.fit(X_train, y_train)

        # XGB Feature importance
        feature_importances = xgb_model.feature_importances_
        sorted_idx_feat_imp = feature_importances.argsort()
        perm_importance = permutation_importance(
            xgb_model, X_test, y_test, n_repeats=25
        )
        sorted_idx_perm_imp = perm_importance.importances_mean.argsort()
        for idx_fi, idx_pi in zip(sorted_idx_feat_imp, sorted_idx_perm_imp):
            dict_res["xgb_feature_importance"][brand][df_tmp_X.columns[idx_fi]] = (
                feature_importances[idx_fi] * 100
            )
            dict_res["permutation_importance"][brand][df_tmp_X.columns[idx_pi]] = (
                perm_importance["importances_mean"][idx_pi] * 100
            )

    # Set compet feats, cause many brands are in the same markets.
    # np.delete, in order to remove 'Sales in volume', and [2:], to remove Date and Brand
    if controllable_features:
        ordered_drivers = list(df_bel.columns[2:-1])
    else:
        bel_markets = list(
            set(
                [
                    elem
                    for brand in dict_res["xgb_feature_importance"]
                    for elem in brands_markets[brand]
                ]
            )
        )
        ordered_drivers = (
            bel_markets + list(set(compet_feats)) + list(df_bel.columns[2:-1])
        )

    print(ordered_drivers)
    for dict_imp in dict_res:
        dict_res[dict_imp] = pd.DataFrame(dict_res[dict_imp]).loc[ordered_drivers]

    return dict_res


def compute_growth_drivers_past(
    df,
    df_bel,
    brands_name,
    features,
    years=[2018, 2019, 2020, 2021],
    controllable_features=False,
):
    """ """

    brands_markets = {
        brand: df[df.Brand == brand].Category.unique().tolist() for brand in brands_name
    }
    # Get markets dataframe
    df_markets = get_df_markets(df)
    # Computing competition price and sales for bel brands
    df_competition_brands = get_df_competition_brands(df, brands_name, features)
    df_competition_brands = (
        df_competition_brands.groupby(["Date", "Category"])
        .agg({"Price per volume": np.mean, "Sales in volume": np.sum})
        .unstack()
        .rename(
            columns={
                "Price per volume": "Competition price",
                "Sales in volume": "Competition sales",
            }
        )
    )
    df_competition_brands.columns = [
        "_".join(elem) for elem in df_competition_brands.columns
    ]
    df_competition_brands = df_competition_brands.reset_index()
    dict_res = {year: {} for year in years}

    for year in tqdm(years, ascii=True, desc="Years"):
        df_bel_year = df_bel[df_bel.Date.astype("datetime64[ns]").dt.year == year]
        df_compet_year = df_competition_brands[
            df_competition_brands.Date.astype("datetime64[ns]").dt.year == year
        ]
        df_markets_year = df_markets[
            df_markets.Date.astype("datetime64[ns]").dt.year == year
        ]

        dict_res[year] = growth_drivers(
            df_bel_year,
            df_markets_year,
            df_compet_year,
            brands_name,
            brands_markets,
            controllable_features=controllable_features,
        )

    dict_res["all"] = growth_drivers(
        df_bel,
        df_markets,
        df_competition_brands,
        brands_name,
        brands_markets,
        controllable_features=controllable_features,
    )

    return dict_res
